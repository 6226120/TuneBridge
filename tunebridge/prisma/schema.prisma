// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Platform {
  SPOTIFY
  APPLE
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  firstname String
  lastname  String
  username  String     @unique
  password  String
  created_at DateTime

  playlists Playlist[]
  userToken UserToken?
  Credentials Credentials?
}

model Credentials {
  credential_id Int @id @default(autoincrement())
  password_hash String 
  last_login DateTime 

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

}

model UserToken {
  id                 Int     @id @default(autoincrement())
  spotifyId          Int?
  appleId            Int?
  spotifyAccessToken String? @unique
  spotifyRefreshToken String? @unique

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model Playlist {
  id           Int      @id @default(autoincrement())
  importedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  platformType Platform
  playlistName String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  playlistTracks PlaylistTrack[]
}

model Track {
  id        Int    @id @default(autoincrement())
  trackName String

  playlistTracks PlaylistTrack[]
}

model PlaylistTrack {
  playlistId Int
  trackId    Int

  playlist Playlist @relation(fields: [playlistId], references: [id])
  track    Track    @relation(fields: [trackId], references: [id])

  @@id([playlistId, trackId])
}